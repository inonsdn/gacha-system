// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/gacha.proto

package gacha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GachaService_Draw_FullMethodName         = "/main.GachaService/Draw"
	GachaService_GetGachaInfo_FullMethodName = "/main.GachaService/GetGachaInfo"
)

// GachaServiceClient is the client API for GachaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GachaServiceClient interface {
	Draw(ctx context.Context, in *DrawRequest, opts ...grpc.CallOption) (*DrawResponse, error)
	GetGachaInfo(ctx context.Context, in *GachaRequest, opts ...grpc.CallOption) (*GachaResponse, error)
}

type gachaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGachaServiceClient(cc grpc.ClientConnInterface) GachaServiceClient {
	return &gachaServiceClient{cc}
}

func (c *gachaServiceClient) Draw(ctx context.Context, in *DrawRequest, opts ...grpc.CallOption) (*DrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DrawResponse)
	err := c.cc.Invoke(ctx, GachaService_Draw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gachaServiceClient) GetGachaInfo(ctx context.Context, in *GachaRequest, opts ...grpc.CallOption) (*GachaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GachaResponse)
	err := c.cc.Invoke(ctx, GachaService_GetGachaInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GachaServiceServer is the server API for GachaService service.
// All implementations must embed UnimplementedGachaServiceServer
// for forward compatibility.
type GachaServiceServer interface {
	Draw(context.Context, *DrawRequest) (*DrawResponse, error)
	GetGachaInfo(context.Context, *GachaRequest) (*GachaResponse, error)
	mustEmbedUnimplementedGachaServiceServer()
}

// UnimplementedGachaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGachaServiceServer struct{}

func (UnimplementedGachaServiceServer) Draw(context.Context, *DrawRequest) (*DrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Draw not implemented")
}
func (UnimplementedGachaServiceServer) GetGachaInfo(context.Context, *GachaRequest) (*GachaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGachaInfo not implemented")
}
func (UnimplementedGachaServiceServer) mustEmbedUnimplementedGachaServiceServer() {}
func (UnimplementedGachaServiceServer) testEmbeddedByValue()                      {}

// UnsafeGachaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GachaServiceServer will
// result in compilation errors.
type UnsafeGachaServiceServer interface {
	mustEmbedUnimplementedGachaServiceServer()
}

func RegisterGachaServiceServer(s grpc.ServiceRegistrar, srv GachaServiceServer) {
	// If the following call pancis, it indicates UnimplementedGachaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GachaService_ServiceDesc, srv)
}

func _GachaService_Draw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GachaServiceServer).Draw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GachaService_Draw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GachaServiceServer).Draw(ctx, req.(*DrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GachaService_GetGachaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GachaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GachaServiceServer).GetGachaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GachaService_GetGachaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GachaServiceServer).GetGachaInfo(ctx, req.(*GachaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GachaService_ServiceDesc is the grpc.ServiceDesc for GachaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GachaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.GachaService",
	HandlerType: (*GachaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Draw",
			Handler:    _GachaService_Draw_Handler,
		},
		{
			MethodName: "GetGachaInfo",
			Handler:    _GachaService_GetGachaInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gacha.proto",
}
